package main

import (
	"fmt"
	"os"
	"path/filepath"
	"submarine-launcher/internal"

	tea "github.com/charmbracelet/bubbletea"
)

func main() {
	// –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ü–≤–µ—Ç–æ–≤ –≤ Windows —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
	if err := internal.EnableWindowsColors(); err == nil {
		// –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		fmt.Print("\033[2J\033[H")
	}

	launcherPath, err := os.Executable()
	if err != nil {
		internal.ShowExitMessage(internal.Error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É—Ç–∏ –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É: "+err.Error())
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∞—É–Ω—á–µ—Ä–∞ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
	manifest, err := internal.GetRemoteManifest()
	if err != nil {
		internal.ShowStyledMessage(internal.Warn, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∞—É–Ω—á–µ—Ä–∞: "+err.Error())
	} else if internal.NeedsLauncherUpdate(manifest) {
		internal.ShowStyledMessage(internal.Info, fmt.Sprintf("–ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∞—É–Ω—á–µ—Ä–∞: %s ‚Üí %s", internal.LauncherVersion, manifest.Version.Launcher))
		err = internal.UpdateLauncher(launcherPath)
		if err != nil {
			internal.ShowExitMessage(internal.Error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∞—É–Ω—á–µ—Ä–∞: "+err.Error())
			return
		}
		// UpdateLauncher –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å, –ø–æ—ç—Ç–æ–º—É —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è
	}

	gameDirPath := internal.GetGameDirPath(launcherPath)

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ª–∞—É–Ω—á–µ—Ä–∞
	for {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–≥—Ä—ã
		localGameVersionPath := filepath.Join(gameDirPath, internal.GameVersionFileName)
		gameDirExist := true
		gameInstalled := true
		needsUpdate := false

		if _, err := os.Stat(gameDirPath); os.IsNotExist(err) {
			gameDirExist = false
			gameInstalled = false
		} else if err != nil {
			internal.ShowExitMessage(internal.Error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞–ø–∫–∏ –∏–≥—Ä—ã: "+err.Error())
			return
		}

		if gameDirExist {
			if _, err := os.Stat(localGameVersionPath); os.IsNotExist(err) {
				gameInstalled = false
			} else if err != nil {
				internal.ShowExitMessage(internal.Error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä—Å–∏–∏ –∏–≥—Ä—ã: "+err.Error())
				return
			}
		}

		// –ï—Å–ª–∏ –∏–≥—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
		if gameInstalled {
			localVersion, err := internal.GetGameLocalVersion(localGameVersionPath)
			if err != nil {
				internal.ShowExitMessage(internal.Error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å –≤–µ—Ä—Å–∏–µ–π: "+err.Error())
				return
			}

			if err != nil {
				internal.ShowStyledMessage(internal.Warn, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É...")
			} else {
				// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π
				isNewer, err := internal.IsVersionNewer(localVersion, manifest.Version.Game)
				if err != nil {
					// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ä–∞–≤–Ω–∏—Ç—å –≤–µ—Ä—Å–∏–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
					internal.ShowStyledMessage(internal.Warn, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ä–∞–≤–Ω–∏—Ç—å –≤–µ—Ä—Å–∏–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏: "+err.Error())
					needsUpdate = localVersion != manifest.Version.Game
				} else {
					needsUpdate = isNewer
				}
			}
		}

		// –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º TUI –º–æ–¥–µ–ª—å
		model := internal.NewTUIModel(gameInstalled, needsUpdate, manifest)
		p := tea.NewProgram(model, tea.WithAltScreen(), tea.WithMouseCellMotion())

		finalModel, err := p.Run()
		if err != nil {
			internal.ShowStyledMessage(internal.Error, "–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: "+err.Error())
			return
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		tuiModel := finalModel.(internal.TUIModel)
		if !tuiModel.WasSelected() {
			return
		}
		choice := tuiModel.GetChoice()

		shouldExit := false

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏–π
		if manifest != nil && !internal.IsGameAccessible(manifest) {
			// –ï—Å–ª–∏ –∏–¥–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
			if choice == 0 && (gameInstalled || needsUpdate) {
				internal.ShowStyledMessage(internal.Error, "–ò–≥—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")
				continue // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
			}
		}

		if !gameInstalled {
			// –ò–≥—Ä–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
			switch choice {
			case 0: // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É
				// –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤ TUI —Ä–µ–∂–∏–º–µ
				err = internal.RunInstallationTUI(gameDirPath, launcherPath)
				if err != nil {
					// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ TUI —Ä–µ–∂–∏–º–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
					continue
				}
				// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
				continue
			case 1: // –í—ã—Ö–æ–¥
				shouldExit = true
			}
		} else if needsUpdate {
			// –ò–≥—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
			switch choice {
			case 0: // –û–±–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É
				// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ TUI —Ä–µ–∂–∏–º–µ
				err = internal.RunUpdateTUI(gameDirPath, launcherPath)
				if err != nil {
					// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
					continue
				}
				// –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
				internal.TryRunGame(gameDirPath)
				shouldExit = true
			case 1: // –í—ã—Ö–æ–¥
				shouldExit = true
			}
		} else {
			// –ò–≥—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –∞–∫—Ç—É–∞–ª—å–Ω–∞
			switch choice {
			case 0: // –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É
				internal.TryRunGame(gameDirPath)
				shouldExit = true
			case 1: // –í—ã—Ö–æ–¥
				shouldExit = true
			}
		}

		if shouldExit {
			internal.ShowStyledMessage(internal.Info, "–õ–∞—É–Ω—á–µ—Ä –∑–∞–∫—Ä—ã—Ç! üëã")
			return
		}
	}
}
