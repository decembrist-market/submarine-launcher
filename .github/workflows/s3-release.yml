name: Build and Deploy Submarine Launcher to S3

on:
  push:
    branches:
      - release

permissions:
  contents: write
  actions: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Extract launcher version
        id: version
        run: |
          VERSION=$(grep 'LauncherVersion.*=' internal/config.go | sed 's/.*"\(.*\)".*/\1/')
          echo "launcher_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Launcher version: $VERSION"

      - name: Check if tag already exists
        run: |
          TAG_NAME="v${{ steps.version.outputs.launcher_version }}"
          echo "Checking if tag $TAG_NAME already exists..."
          
          # Проверяем локальные тэги
          if git tag -l | grep -q "^$TAG_NAME$"; then
            echo "ERROR: Tag $TAG_NAME already exists locally!"
            exit 1
          fi
          
          # Проверяем удаленные тэги
          git fetch --tags
          if git tag -l | grep -q "^$TAG_NAME$"; then
            echo "ERROR: Tag $TAG_NAME already exists in remote repository!"
            echo "Please increment the LauncherVersion in internal/config.go"
            exit 1
          fi
          
          echo "Tag $TAG_NAME does not exist. Proceeding with build..."

      - name: Create and push tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.version.outputs.launcher_version }}" -m "Release version ${{ steps.version.outputs.launcher_version }}"
          git push origin "v${{ steps.version.outputs.launcher_version }}"

      - name: Run tests
        run: go test ./...

      - name: Build for Windows
        env:
          GOOS: windows
          GOARCH: amd64
        run: |
          echo "Building for Windows..."
          go build -o SubmarineLauncher.exe .

      - name: Build for Linux
        env:
          GOOS: linux
          GOARCH: amd64
        run: |
          echo "Building for Linux..."
          go build -o SubmarineLauncher .

      - name: Build for macOS
        env:
          GOOS: darwin
          GOARCH: amd64
        run: |
          echo "Building for macOS..."
          go build -o SubmarineLauncher-macos .

      # Установка старой проверенной версии AWS CLI (7 месяцев назад)
      - name: Install AWS CLI (stable old version)
        run: |
          echo "Installing stable AWS CLI version from 7 months ago..."
          
          # Полностью удаляем новые версии
          sudo rm -rf /usr/local/aws-cli || true
          sudo rm -f /usr/local/bin/aws || true
          sudo rm -f /usr/local/bin/aws_completer || true
          
          # Устанавливаем проверенную версию 2.15.30 (июль 2024)
          sudo apt update
          sudo apt install -y unzip curl
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.15.30.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          
          echo "Installed AWS CLI version:"
          /usr/local/bin/aws --version

      # Настройка AWS CLI для Timeweb S3 с отключением multipart
      - name: Configure AWS CLI for Timeweb S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
        run: |
          # Создаем директорию .aws
          mkdir -p ~/.aws
          
          # Создаем файл credentials
          cat > ~/.aws/credentials << EOF
          [default]
          aws_access_key_id = $AWS_ACCESS_KEY_ID
          aws_secret_access_key = $AWS_SECRET_ACCESS_KEY
          EOF
          
          # Создаем файл config с отключенным multipart
          cat > ~/.aws/config << EOF
          [default]
          region = ru-1
          output = json
          s3 =
              multipart_threshold = 100MB
              multipart_chunksize = 16MB
              max_concurrent_requests = 1
              max_bandwidth = 100MB/s
          EOF
          
          echo "AWS CLI configured for Timeweb S3 with multipart disabled"

      # Тестируем подключение
      - name: Test S3 connection
        run: |
          echo "Testing connection to Timeweb S3..."
          /usr/local/bin/aws s3 ls s3://${{ secrets.S3_BUCKET_NAME }} --endpoint-url ${{ secrets.S3_ENDPOINT_URL }} || echo "Connection test failed, but continuing..."

      # Загрузка Windows версии
      - name: Upload Windows version to S3
        run: |
          echo "Uploading Windows SubmarineLauncher.exe to S3..."
          /usr/local/bin/aws s3 cp SubmarineLauncher.exe \
            s3://${{ secrets.S3_BUCKET_NAME }}/submarine-game/windows/SubmarineLauncher.exe \
            --endpoint-url ${{ secrets.S3_ENDPOINT_URL }}

      # Загрузка Linux версии
      - name: Upload Linux version to S3
        run: |
          echo "Uploading Linux SubmarineLauncher to S3..."
          /usr/local/bin/aws s3 cp SubmarineLauncher \
            s3://${{ secrets.S3_BUCKET_NAME }}/submarine-game/linux/SubmarineLauncher \
            --endpoint-url ${{ secrets.S3_ENDPOINT_URL }}

      # Загрузка macOS версии
      - name: Upload macOS version to S3
        run: |
          echo "Uploading macOS SubmarineLauncher to S3..."
          /usr/local/bin/aws s3 cp SubmarineLauncher-macos \
            s3://${{ secrets.S3_BUCKET_NAME }}/submarine-game/macos/SubmarineLauncher \
            --endpoint-url ${{ secrets.S3_ENDPOINT_URL }}

      - name: Verify uploads
        run: |
          echo "Verifying all uploads..."
          /usr/local/bin/aws s3 ls s3://${{ secrets.S3_BUCKET_NAME }}/submarine-game/windows/ --endpoint-url ${{ secrets.S3_ENDPOINT_URL }}
          /usr/local/bin/aws s3 ls s3://${{ secrets.S3_BUCKET_NAME }}/submarine-game/linux/ --endpoint-url ${{ secrets.S3_ENDPOINT_URL }}
          /usr/local/bin/aws s3 ls s3://${{ secrets.S3_BUCKET_NAME }}/submarine-game/macos/ --endpoint-url ${{ secrets.S3_ENDPOINT_URL }}

      - name: Clean up
        if: always()
        run: |
          # Очищаем credentials для безопасности
          rm -rf ~/.aws
          # Удаляем собранные файлы
          rm -f SubmarineLauncher.exe SubmarineLauncher SubmarineLauncher-macos
