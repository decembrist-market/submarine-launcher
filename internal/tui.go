package internal

import (
	"fmt"
	"strings"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

// –°—Ç–∏–ª–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
var (
	titleStyle = lipgloss.NewStyle().
			Foreground(lipgloss.Color("#00D4AA")).
			Bold(true).
			Align(lipgloss.Center).
			Padding(1, 2)

	logoStyle = lipgloss.NewStyle().
			Foreground(lipgloss.Color("#00CED1")).
			Bold(true).
			Align(lipgloss.Center)

	menuItemStyle = lipgloss.NewStyle().
			Foreground(lipgloss.Color("#FFFFFF")).
			Padding(0, 4)

	selectedItemStyle = lipgloss.NewStyle().
				Foreground(lipgloss.Color("#000000")).
				Background(lipgloss.Color("#00D4AA")).
				Bold(true).
				Padding(0, 4)

	statusStyle = lipgloss.NewStyle().
			Foreground(lipgloss.Color("#888888")).
			Align(lipgloss.Center).
			Padding(1, 0)

	boxStyle = lipgloss.NewStyle().
			Border(lipgloss.RoundedBorder()).
			BorderForeground(lipgloss.Color("#00D4AA")).
			Padding(1, 2).
			Align(lipgloss.Center)

	errorStyle = lipgloss.NewStyle().
			Foreground(lipgloss.Color("#FF6B6B")).
			Bold(true)

	successStyle = lipgloss.NewStyle().
			Foreground(lipgloss.Color("#51CF66")).
			Bold(true)

	// –ù–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
	containerStyle = lipgloss.NewStyle().
			Background(lipgloss.Color("#0D1117")).
			Padding(1, 2)

	footerStyle = lipgloss.NewStyle().
			Foreground(lipgloss.Color("#484F58")).
			Align(lipgloss.Center).
			Border(lipgloss.NormalBorder(), true, false, false, false).
			BorderForeground(lipgloss.Color("#21262D"))
)

type MenuChoice int

const (
	InstallGame MenuChoice = iota
	UpdateGame
	RunGame
	Exit
)

type TUIModel struct {
	choices       []string
	cursor        int
	gameInstalled bool
	needsUpdate   bool
	status        string
	statusType    string // "info", "error", "success"
	width         int    // –®–∏—Ä–∏–Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
	height        int    // –í—ã—Å–æ—Ç–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
	selected      bool   // –ë—ã–ª –ª–∏ —Ä–µ–∞–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω –ø—É–Ω–∫—Ç –º–µ–Ω—é
}

func NewTUIModel(gameInstalled, needsUpdate bool) TUIModel {
	choices := []string{"üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É", "üö™ –í—ã—Ö–æ–¥"}

	if !gameInstalled {
		choices = []string{"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É", "üö™ –í—ã—Ö–æ–¥"}
	} else if needsUpdate {
		choices = []string{"üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É", "üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É", "üö™ –í—ã—Ö–æ–¥"}
	}

	return TUIModel{
		choices:       choices,
		cursor:        0,
		gameInstalled: gameInstalled,
		needsUpdate:   needsUpdate,
		status:        "",
		statusType:    "info",
		width:         80, // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		height:        24, // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}
}

func (m TUIModel) Init() tea.Cmd {
	return nil
}

func (m TUIModel) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.WindowSizeMsg:
		// –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
		m.width = msg.Width
		m.height = msg.Height
		return m, nil
	case tea.KeyMsg:
		switch msg.String() {
		case "ctrl+c", "q", "esc":
			return m, tea.Quit
		case "up", "k":
			if m.cursor > 0 {
				m.cursor--
			}
		case "down", "j":
			if m.cursor < len(m.choices)-1 {
				m.cursor++
			}
		case "enter", " ":
			m.selected = true
			return m, tea.Quit
		}
	}
	return m, nil
}

func (m TUIModel) View() string {
	// –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	container := containerStyle.Width(m.width).Height(m.height)

	// ASCII –ª–æ–≥–æ
	logo := `üö¢ –°–£–ë–ú–ê–†–ò–ù–ê LAUNCHER üö¢`

	// –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
	content := ""

	// –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø
	content += logoStyle.Width(m.width).Render(logo) + "\n\n"

	// –°—Ç–∞—Ç—É—Å (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ)
	if m.status != "" {
		var statusStyled string
		switch m.statusType {
		case "error":
			statusStyled = errorStyle.Render("‚ùå " + m.status)
		case "success":
			statusStyled = successStyle.Render("‚úÖ " + m.status)
		default:
			statusStyled = statusStyle.Render("‚ÑπÔ∏è  " + m.status)
		}
		content += lipgloss.NewStyle().Width(m.width).Align(lipgloss.Center).Render(statusStyled) + "\n\n"
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	var gameStatus string
	if !m.gameInstalled {
		gameStatus = "üî¥ –ò–≥—Ä–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
	} else if m.needsUpdate {
		gameStatus = "üü° –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
	} else {
		gameStatus = "üü¢ –ò–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É"
	}

	// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
	statusBox := boxStyle.Width(m.width - 10).Render(gameStatus)
	content += lipgloss.NewStyle().Width(m.width).Align(lipgloss.Center).Render(statusBox) + "\n\n"

	// –ú–µ–Ω—é
	menuTitle := titleStyle.Width(m.width).Render("–í–´–ë–ï–†–ò–¢–ï –î–ï–ô–°–¢–í–ò–ï")
	content += menuTitle + "\n\n"

	// –†–µ–Ω–¥–µ—Ä–∏–º –º–µ–Ω—é –ø–æ —Ü–µ–Ω—Ç—Ä—É
	menu := ""
	for i, choice := range m.choices {
		cursor := "  "
		if m.cursor == i {
			cursor = "‚ñ∂ "
			menu += selectedItemStyle.Width(30).Align(lipgloss.Center).Render(cursor+choice) + "\n"
		} else {
			menu += menuItemStyle.Width(30).Align(lipgloss.Center).Render(cursor+choice) + "\n"
		}
	}

	menuContainer := boxStyle.Width(40).Render(menu)
	content += lipgloss.NewStyle().Width(m.width).Align(lipgloss.Center).Render(menuContainer)

	// –î–æ–±–∞–≤–ª—è–µ–º footer —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
	footer := footerStyle.Width(m.width).Render("‚Üë/‚Üì - –Ω–∞–≤–∏–≥–∞—Ü–∏—è ‚Ä¢ Enter - –≤—ã–±—Ä–∞—Ç—å ‚Ä¢ Esc/Q - –≤—ã—Ö–æ–¥")

	// –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
	contentHeight := strings.Count(content, "\n") + 3 // +3 –¥–ª—è footer
	emptyLines := (m.height - contentHeight) / 2
	if emptyLines < 0 {
		emptyLines = 0
	}

	// –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	result := strings.Repeat("\n", emptyLines) + content

	// –î–æ–±–∞–≤–ª—è–µ–º footer –≤–Ω–∏–∑—É
	footerPadding := m.height - strings.Count(result, "\n") - 2
	if footerPadding > 0 {
		result += strings.Repeat("\n", footerPadding)
	}
	result += footer

	return container.Render(result)
}

func (m TUIModel) GetChoice() int {
	return m.cursor
}

func (m TUIModel) WasSelected() bool {
	return m.selected
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Å—Ç–∏–ª–µ–º
func ShowProgress(current, total float64, message string) {
	percent := int(current / total * 100)
	if percent > 100 {
		percent = 100
	}

	barWidth := 40
	filled := int(float64(barWidth) * float64(percent) / 100.0)

	progressBar := lipgloss.NewStyle().
		Foreground(lipgloss.Color("#00D4AA")).
		Render(strings.Repeat("‚ñà", filled)) +
		lipgloss.NewStyle().
			Foreground(lipgloss.Color("#333333")).
			Render(strings.Repeat("‚ñë", barWidth-filled))

	progressText := fmt.Sprintf("%s [%s] %d%%", message, progressBar, percent)
	fmt.Printf("\r%s", progressText)

	if percent == 100 {
		fmt.Println()
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Å—Ç–∏–ª–µ
func ShowStyledMessage(msgType, message string) {
	var styledMsg string
	switch msgType {
	case "error":
		styledMsg = errorStyle.Render("‚ùå " + message)
	case "success":
		styledMsg = successStyle.Render("‚úÖ " + message)
	case "warning":
		styledMsg = lipgloss.NewStyle().
			Foreground(lipgloss.Color("#FFD43B")).
			Bold(true).
			Render("‚ö†Ô∏è  " + message)
	default:
		styledMsg = statusStyle.Render("‚ÑπÔ∏è  " + message)
	}

	fmt.Println(boxStyle.Render(styledMsg))
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Å—Ç–∏–ª–µ
func ShowConfirmDialog(message string) bool {
	confirmBox := fmt.Sprintf("%s\n\n%s",
		message,
		statusStyle.Render("y/–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –∫–ª–∞–≤–∏—à–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã"))

	fmt.Println(boxStyle.Render(confirmBox))

	return CheckAnswer()
}
