package internal

import (
	"fmt"
	"strings"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

// –°—Ç–∏–ª–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
var (
	titleStyle = lipgloss.NewStyle().
			Foreground(lipgloss.Color("#00D4AA")).
			Bold(true).
			Align(lipgloss.Center).
			Padding(1, 2)

	logoStyle = lipgloss.NewStyle().
			Foreground(lipgloss.Color("#00CED1")).
			Bold(true).
			Align(lipgloss.Center)

	menuItemStyle = lipgloss.NewStyle().
			Foreground(lipgloss.Color("#FFFFFF")).
			Padding(0, 4)

	selectedItemStyle = lipgloss.NewStyle().
				Foreground(lipgloss.Color("#000000")).
				Background(lipgloss.Color("#00D4AA")).
				Bold(true).
				Padding(0, 4)

	statusStyle = lipgloss.NewStyle().
			Foreground(lipgloss.Color("#888888")).
			Align(lipgloss.Center).
			Padding(1, 0)

	boxStyle = lipgloss.NewStyle().
			Border(lipgloss.RoundedBorder()).
			BorderForeground(lipgloss.Color("#00D4AA")).
			Padding(1, 2).
			Align(lipgloss.Center)

	errorStyle = lipgloss.NewStyle().
			Foreground(lipgloss.Color("#FF6B6B")).
			Bold(true)

	successStyle = lipgloss.NewStyle().
			Foreground(lipgloss.Color("#51CF66")).
			Bold(true)
)

type MenuChoice int

const (
	InstallGame MenuChoice = iota
	UpdateGame
	RunGame
	Exit
)

type TUIModel struct {
	choices       []string
	cursor        int
	gameInstalled bool
	needsUpdate   bool
	status        string
	statusType    string // "info", "error", "success"
}

func NewTUIModel(gameInstalled, needsUpdate bool) TUIModel {
	choices := []string{"üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É", "üö™ –í—ã—Ö–æ–¥"}

	if !gameInstalled {
		choices = []string{"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É", "üö™ –í—ã—Ö–æ–¥"}
	} else if needsUpdate {
		choices = []string{"üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É", "üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É", "üö™ –í—ã—Ö–æ–¥"}
	}

	return TUIModel{
		choices:       choices,
		cursor:        0,
		gameInstalled: gameInstalled,
		needsUpdate:   needsUpdate,
		status:        "", // –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		statusType:    "info",
	}
}

func (m TUIModel) Init() tea.Cmd {
	return nil
}

func (m TUIModel) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch msg.String() {
		case "ctrl+c", "q", "esc":
			return m, tea.Quit
		case "up", "k":
			if m.cursor > 0 {
				m.cursor--
			}
		case "down", "j":
			if m.cursor < len(m.choices)-1 {
				m.cursor++
			}
		case "enter", " ":
			return m, tea.Quit
		}
	}
	return m, nil
}

func (m TUIModel) View() string {
	// ASCII –ª–æ–≥–æ
	logo := `
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ  üö¢ SUBMARINE LAUNCHER üö¢               ‚îÇ
    ‚îÇ     –ü–æ–¥–≤–æ–¥–Ω—ã–π –º–∏—Ä –∂–¥–µ—Ç –≤–∞—Å!             ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò`

	s := logoStyle.Render(logo) + "\n"

	// –°—Ç–∞—Ç—É—Å (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ)
	if m.status != "" {
		var statusStyled string
		switch m.statusType {
		case "error":
			statusStyled = errorStyle.Render("‚ùå " + m.status)
		case "success":
			statusStyled = successStyle.Render("‚úÖ " + m.status)
		default:
			statusStyled = statusStyle.Render("‚ÑπÔ∏è  " + m.status)
		}
		s += "\n" + statusStyled + "\n"
	}

	// –ú–µ–Ω—é
	menuBox := "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
	for i, choice := range m.choices {
		cursor := " "
		if m.cursor == i {
			cursor = "‚ñ∂"
			menuBox += selectedItemStyle.Render(cursor+" "+choice) + "\n"
		} else {
			menuBox += menuItemStyle.Render(cursor+" "+choice) + "\n"
		}
	}

	menuBox += "\n" + statusStyle.Render("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚Üë‚Üì –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, Enter –¥–ª—è –≤—ã–±–æ—Ä–∞, q –¥–ª—è –≤—ã—Ö–æ–¥–∞")

	s += "\n" + boxStyle.Render(menuBox)

	return s
}

func (m TUIModel) GetChoice() int {
	return m.cursor
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Å—Ç–∏–ª–µ–º
func ShowProgress(current, total float64, message string) {
	percent := int(current / total * 100)
	if percent > 100 {
		percent = 100
	}

	barWidth := 40
	filled := int(float64(barWidth) * float64(percent) / 100.0)

	progressBar := lipgloss.NewStyle().
		Foreground(lipgloss.Color("#00D4AA")).
		Render(strings.Repeat("‚ñà", filled)) +
		lipgloss.NewStyle().
			Foreground(lipgloss.Color("#333333")).
			Render(strings.Repeat("‚ñë", barWidth-filled))

	progressText := fmt.Sprintf("%s [%s] %d%%", message, progressBar, percent)
	fmt.Printf("\r%s", progressText)

	if percent == 100 {
		fmt.Println()
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Å—Ç–∏–ª–µ
func ShowStyledMessage(msgType, message string) {
	var styledMsg string
	switch msgType {
	case "error":
		styledMsg = errorStyle.Render("‚ùå " + message)
	case "success":
		styledMsg = successStyle.Render("‚úÖ " + message)
	case "warning":
		styledMsg = lipgloss.NewStyle().
			Foreground(lipgloss.Color("#FFD43B")).
			Bold(true).
			Render("‚ö†Ô∏è  " + message)
	default:
		styledMsg = statusStyle.Render("‚ÑπÔ∏è  " + message)
	}

	fmt.Println(boxStyle.Render(styledMsg))
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Å—Ç–∏–ª–µ
func ShowConfirmDialog(message string) bool {
	confirmBox := fmt.Sprintf("%s\n\n%s",
		message,
		statusStyle.Render("y/–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –∫–ª–∞–≤–∏—à–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã"))

	fmt.Println(boxStyle.Render(confirmBox))

	return CheckAnswer()
}
